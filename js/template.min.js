Vue.component("modal",{template:'<div v-if="isOpen">\n    \x3c!--Begin Modal--\x3e\n    <div @click="CloseModal" class="modal-background">\n    </div>\n    <div class="modal-container revealUp">\n        <div class="modal-header">\n            <div class="modal-descr">\n                <slot name="description"/>\n            </div>\n            <div class="modal-close">\n                <a href="#" @click.prevent="CloseModal">\n                    <i class="fas fa-times"></i>\n                </a>\n            </div>\n        </div>\n        <slot name="body"/>\n    </div>\n    \x3c!--End Modal--\x3e\n    </div>',props:{isOpen:{type:Boolean,default:!1}},methods:{CloseModal(){return this.$emit("close-modal")}}}),Vue.component("contact-form",{template:'\n        <form class="contact_form" action="" name="measure-form" netlify id="contact-form">\n        <div class="form-group">\n            <label for="client_name">Client Name<sup class="form-required">*</sup></label>\n            <input type="text" id="client_name" placeholder="Full Name" name="name" required>\n        </div>\n        <div class="form-group">\n            <label for="client_email">Client Email<sup class="form-required">*</sup></label>\n            <input type="text" id="client_email" placeholder="example@email.com" name="email" required>\n        </div>\n        <div class="form-group">\n            <label for="cap_size_type">Cap Size Type<sup class="form-required">*</sup></label>\n            <select v-model="capSizeType" name="cap_size_type" id="cap_size_type" required>\n                <option value="custom">Custom</option>\n                <option value="standard" selected>Standard</option>\n            </select>\n        </div>\n        <div class="form-group" :hidden="capSizeIsStandard == false">\n            <label for="cap_size">Cap Size<sup class="form-required">*</sup></label>\n            <select name="cap_size" id="cap_size" required>\n                <option v-for="(measurement, index) in fetchMeasurements" :keys="index" :value="measurement">{{measurement}}</option>\n            </select>\n        </div>\n        <div class="form-group" :hidden="capSizeIsStandard == true">\n            <label for="cap_size">Cap Size<sup class="form-required">*</sup></label>\n            <input type="text" name="cap_size" id="cap_size" placeholder="Custom size" required>\n        </div>\n        <div class="form-group">\n            <label for="cap_measure">Cap Measurement Type<sup class="form-required">*</sup></label>\n            <select name="cap_measure" v-model="measurementType" id="cap_measure" required>\n                <option value="inch" selected>Inches</option>\n                <option value="cm">Centimeters (cm)</option>\n            </select>\n        </div>\n        <div class="form-group">\n            <label for="cap_type">Cap Type<sup class="form-required">*</sup></label>\n            <select name="cap_type" id="cap_type" required>\n                <option v-for="(cap,index) in caps" :value="cap.name">{{cap.name}}</option>\n            </select>\n        </div>\n        \n        <div class="form-group contact_form-desc" >\n            <label for="add_info">Additional Information</label>\n            <textarea name="cap_desc" id="cap_desc" cols="30" rows="4"></textarea>\n        </div>\n        <div class="contact_form-submit">\n            <button class="btn btn-primary contact_form-submit">Send Cap Data</button>\n        </div>\n    </form>\n    ',data:()=>({capSizeType:"standard",measurementType:"inch",measurements:capMeasurement,caps:caps}),computed:{capSizeIsStandard(){return"standard"==this.capSizeType},fetchMeasurements(){return"inch"==this.measurementType?this.measurements.map(measurement=>measurement.inch):this.measurements.map(measurement=>measurement.cm)}}}),Vue.component("carousel",{template:'\n    <div :class="containerClass">\n        <transition :name="transition" mode="out-in">\n            <img v-for="(image,index) in images" :key="index" v-if="currentIndex == index" :class="imageClass" :src="image" style="width:100%; height:auto"/>\n        </transition>\n        <div :class="counterContainClass">\n            <button :class="decreaseBtnClass" @click="DecrementImage"><</button>\n            <button :class="increaseBtnClass" @click="IncrementImage">></button>\n        </div>\n    </div>\n    ',props:{transition:{type:String,default:""},images:{type:Array,default:()=>[]},containerClass:{type:Array,default:()=>[]},imageClass:{type:Array,default:()=>[]},increaseBtnClass:{type:Array,default:()=>[]},decreaseBtnClass:{type:Array,default:()=>[]},counterContainClass:{type:Array,default:()=>[]}},data:()=>({currentIndex:0}),computed:{lastImageIndex(){return this.images.length-1}},methods:{IncrementImage(){return this.currentIndex==this.lastImageIndex?this.currentIndex=0:this.currentIndex=this.currentIndex+1},DecrementImage(){return 0==this.currentIndex?this.currentIndex=this.lastImageIndex:this.currentIndex=this.currentIndex-1}}});